#!/usr/bin/env node

/**
 * Module dependencies.
 */
const path = require("path");
//require("dotenv").config(path.join(__dirname, ".env"));
require("dotenv").config({
  path: "/home/ecl-prod/aiims-uat3/recruitment/bin/.env",
});

const PORT = normalizePort(process.env.PORT || "4001");

const NODE_ENV = process.env.NODE_ENV
  ? process.env.NODE_ENV.toLowerCase()
  : "development";

//Please require any modules only after process environment home has been set

const app = require("../app");
const https = require("https");
const http = require("http");
const fs = require("fs");
require("../src/model/db");

app.set("port", PORT);
app.set("env", NODE_ENV);

let server;

if (NODE_ENV == "production" || NODE_ENV == "nonproduction") {
  server = https.createServer(
    {
      key: fs.readFileSync(process.env.SSL_KEY_PATH),
      cert: fs.readFileSync(process.env.SSL_CERT_PATH),
    },
    app
  );
} else {
  server = http.createServer(app);
}
server.listen(PORT);
server.on("error", onError);
server.on("listening", onlistening);

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  let bind = typeof PORT === "string" ? "Pipe " + PORT : "Port " + PORT;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.log(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.log(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onlistening() {
  let addr = server.address();
  let bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log(
    "recruitment service is Listening on " + bind + " in " + NODE_ENV
  );
}
